library(GGally)
library(tidyr)
library(Hmisc)
library(dplyr)
# install.packages("tidyverse")
library(tidyverse)
# install.packages("imputeTS")
library(zoo)
# install.packages("data.table")
# install.packages("mltools")
library(data.table)
library(mltools)
library(imputeTS)
maind = read.csv("housePriceData.csv")
maind
smp_size <- floor(0.80 * nrow(maind))
set.seed(123)
train_ind <- sample(seq_len(nrow(mydata)), size = smp_size)
knitr::opts_chunk$set(echo = TRUE)
library(GGally)
library(tidyr)
library(Hmisc)
library(dplyr)
# install.packages("tidyverse")
library(tidyverse)
# install.packages("imputeTS")
library(zoo)
# install.packages("data.table")
# install.packages("mltools")
library(data.table)
library(mltools)
library(imputeTS)
maind = read.csv("housePriceData.csv")
maind
smp_size <- floor(0.80 * nrow(maind))
set.seed(123)
train_ind <- sample(seq_len(nrow(maind)), size = smp_size)
train <- maind[train_ind, ]
test <- maind[-train_ind, ]
# train
# test
# usedNA <- maind %>% select(BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType2, FireplaceQu, GarageType, GarageFinish, GarageQual, GarageCond, PoolQC, Fence, MiscFeature)
#
# noUse <- maind %>% select(-BsmtQual, -BsmtCond, -BsmtExposure, -BsmtFinType1, -BsmtFinType2, -FireplaceQu, -GarageType, -GarageFinish, -GarageQual, -GarageCond, -PoolQC, -Fence, -MiscFeature)
#
nums <- select_if(maind, is.numeric)
nonNums <- maind %>% select_if(negate(is.numeric))
toDrop <- c("PoolQC")
nonNums[ , !(names(nonNums) %in% toDrop)]
NA2mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
nums[] <- lapply(nums, NA2mean)
# fixed<-merge(nonNums,nums, by="Id",all =TRUE)
# charr <- housePriceData %>% select_if(Negate(is.integer))
fixed <- cbind(nums, nonNums)
# noUse <- na.replace(noUse, 0)
#First remove the ID column from the data frame because we dont want to consider it in the correlation
nums <- nums[ , !names(nums) %in% c("Id")]
#this line finds the correlation betwen all values and the sales price
correlations <- cor(nums$SalePrice, nums[,1:36])
#this section sorts the highest correlation values and prints them
sortedCorrs <- order(abs(correlations))
sortedCorrs
topCorrs <- correlations[,c(7 , 6, 23, 19, 13, 12, 27, 26, 16,  4)]
topCorrs
encodedNonAndSale <- one_hot(as.data.table(nonNums))
#oone hot encode the non numeric data
nonAndSale <- cbind(nums$SalePrice, nonNums)
colnames(nonAndSale)[1] <- "SalePrice"
encodedNonAndSale <- one_hot(as.data.table(nonAndSale))
# add the salesprice column and one hot encode the non numeric data
nonAndSale <- cbind(nums$SalePrice, nonNums)
colnames(nonAndSale)[1] <- "SalePrice"
encodedNonAndSale <- one_hot(as.data.table(nonAndSale))
#this line finds the correlation betwen all values and the sales price
nonNumCorrs <- cor(encodedNonAndSale, encodedNonAndSale[,2:241])
#this section sorts the highest correlation values and prints them
sortedCorrs <- order(abs(correlations))
sortedCorrs
# topCorrs <- correlations[,c(7 , 6, 23, 19, 13, 12, 27, 26, 16,  4)]
# topCorrs
# add the salesprice column and one hot encode the non numeric data
nonAndSale <- cbind(nums$SalePrice, nonNums)
colnames(nonAndSale)[1] <- "SalePrice"
encodedNonAndSale <- one_hot(as.data.table(nonAndSale))
#this line finds the correlation betwen all values and the sales price
nonNumCorrs <- cor(encodedNonAndSale, encodedNonAndSale[,2:241])
#this section sorts the highest correlation values and prints them
sortedCorrs <- order(abs(nonNumCorrs))
sortedCorrs
# topCorrs <- correlations[,c(7 , 6, 23, 19, 13, 12, 27, 26, 16,  4)]
# topCorrs
nonNumsEncode <- as.numeric(nonNums$i)
nonNumsEncode
knitr::opts_chunk$set(echo = TRUE)
library(GGally)
library(tidyr)
library(Hmisc)
library(dplyr)
# install.packages("tidyverse")
library(tidyverse)
# install.packages("imputeTS")
library(zoo)
# install.packages("data.table")
# install.packages("mltools")
library(data.table)
library(mltools)
library(imputeTS)
maind = read.csv("housePriceData.csv")
maind
smp_size <- floor(0.80 * nrow(maind))
set.seed(123)
train_ind <- sample(seq_len(nrow(maind)), size = smp_size)
train <- maind[train_ind, ]
test <- maind[-train_ind, ]
# train
# test
# usedNA <- maind %>% select(BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType2, FireplaceQu, GarageType, GarageFinish, GarageQual, GarageCond, PoolQC, Fence, MiscFeature)
#
# noUse <- maind %>% select(-BsmtQual, -BsmtCond, -BsmtExposure, -BsmtFinType1, -BsmtFinType2, -FireplaceQu, -GarageType, -GarageFinish, -GarageQual, -GarageCond, -PoolQC, -Fence, -MiscFeature)
#
nums <- select_if(maind, is.numeric)
nonNums <- maind %>% select_if(negate(is.numeric))
toDrop <- c("PoolQC")
nonNums[ , !(names(nonNums) %in% toDrop)]
NA2mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
nums[] <- lapply(nums, NA2mean)
# fixed<-merge(nonNums,nums, by="Id",all =TRUE)
# charr <- housePriceData %>% select_if(Negate(is.integer))
fixed <- cbind(nums, nonNums)
# noUse <- na.replace(noUse, 0)
#First remove the ID column from the data frame because we dont want to consider it in the correlation
nums <- nums[ , !names(nums) %in% c("Id")]
#this line finds the correlation betwen all values and the sales price
correlations <- cor(nums$SalePrice, nums[,1:36])
#this section sorts the highest correlation values and prints them
sortedCorrs <- order(abs(correlations))
sortedCorrs
topCorrs <- correlations[,c(7 , 6, 23, 19, 13, 12, 27, 26, 16,  4)]
topCorrs
nonNumsEncode <- as.numeric(nonNums$i)
nonNumsEncode
nonNumsEncode <- char2num(nonNums$MSZoning)
View(nonNums)
CatFeatures <- train[, CatFeaturesList]
# CatFeatures <- train[, CatFeaturesList]
for(i in names(nonNums)){
mod.aov <- aov(formula = maind$SalePrice ~ nonNums[[i]], data = train)
summary(mod.aov)[[1]][["Pr(>F)"]][1]
}
View(mod.aov)
# CatFeatures <- train[, CatFeaturesList]
for(i in names(nonNums)){
mod.aov <- aov(formula = maind$SalePrice ~ nonNums[[i]], data = train)
summary(mod.aov)[[i]][["Pr(>F)"]][i]
}
# CatFeatures <- train[, CatFeaturesList]
for(i in names(nonNums)){
mod.aov <- aov(formula = maind$SalePrice ~ nonNums[[i]], data = train)
summary(mod.aov)[[1]][["Pr(>F)"]][1]
}
View(correlations)
View(mod.aov)
View(mod.aov)
# CatFeatures <- train[, CatFeaturesList]
for(i in names(nonNums)){
mod.aov <- aov(formula = maind$SalePrice ~ nonNums[[i]], data = train)
summary(mod.aov)
# [[1]][["Pr(>F)"]][1]
}
View(mod.aov)
# CatFeatures <- train[, CatFeaturesList]
for(i in names(nonNums)){
aovResult <- aov(formula = maind$SalePrice ~ nonNums[[i]], data = train)
summary(aovResult)[[1]][["Pr(>F)"]]
}
View(aovResult)
# CatFeatures <- train[, CatFeaturesList]
for(i in names(nonNums)){
aovResult <- aov(formula = maind$SalePrice ~ nonNums[[i]], data = train)
summary(aovResult)[[1]][["Pr(>F)"]][[1]]
}
knitr::opts_chunk$set(echo = TRUE)
library(GGally)
library(tidyr)
library(Hmisc)
library(dplyr)
# install.packages("tidyverse")
library(tidyverse)
# install.packages("imputeTS")
library(zoo)
# install.packages("data.table")
# install.packages("mltools")
library(data.table)
library(mltools)
library(imputeTS)
maind = read.csv("housePriceData.csv")
maind
smp_size <- floor(0.80 * nrow(maind))
set.seed(123)
train_ind <- sample(seq_len(nrow(maind)), size = smp_size)
train <- maind[train_ind, ]
test <- maind[-train_ind, ]
# train
# test
# usedNA <- maind %>% select(BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType2, FireplaceQu, GarageType, GarageFinish, GarageQual, GarageCond, PoolQC, Fence, MiscFeature)
#
# noUse <- maind %>% select(-BsmtQual, -BsmtCond, -BsmtExposure, -BsmtFinType1, -BsmtFinType2, -FireplaceQu, -GarageType, -GarageFinish, -GarageQual, -GarageCond, -PoolQC, -Fence, -MiscFeature)
#
nums <- select_if(maind, is.numeric)
nonNums <- maind %>% select_if(negate(is.numeric))
toDrop <- c("PoolQC")
nonNums[ , !(names(nonNums) %in% toDrop)]
NA2mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
nums[] <- lapply(nums, NA2mean)
# fixed<-merge(nonNums,nums, by="Id",all =TRUE)
# charr <- housePriceData %>% select_if(Negate(is.integer))
fixed <- cbind(nums, nonNums)
# noUse <- na.replace(noUse, 0)
#First remove the ID column from the data frame because we dont want to consider it in the correlation
nums <- nums[ , !names(nums) %in% c("Id")]
#this line finds the correlation betwen all values and the sales price
correlations <- cor(nums$SalePrice, nums[,1:36])
#this section sorts the highest correlation values and prints them
sortedCorrs <- order(abs(correlations))
sortedCorrs
topCorrs <- correlations[,c(7 , 6, 23, 19, 13, 12, 27, 26, 16,  4)]
topCorrs
# CatFeatures <- train[, CatFeaturesList]
for(i in names(nonNums)){
aovResult <- aov(formula = maind$SalePrice ~ nonNums[[i]], data = train)
summary(aovResult)[[1]][["Pr(>F)"]][[1]]
}
View(nonNums)
knitr::opts_chunk$set(echo = TRUE)
library(GGally)
library(tidyr)
library(Hmisc)
library(dplyr)
# install.packages("tidyverse")
library(tidyverse)
# install.packages("imputeTS")
library(zoo)
# install.packages("data.table")
# install.packages("mltools")
library(data.table)
library(mltools)
library(imputeTS)
maind = read.csv("housePriceData.csv")
maind
smp_size <- floor(0.80 * nrow(maind))
set.seed(123)
train_ind <- sample(seq_len(nrow(maind)), size = smp_size)
train <- maind[train_ind, ]
test <- maind[-train_ind, ]
# train
# test
# usedNA <- maind %>% select(BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType2, FireplaceQu, GarageType, GarageFinish, GarageQual, GarageCond, PoolQC, Fence, MiscFeature)
#
# noUse <- maind %>% select(-BsmtQual, -BsmtCond, -BsmtExposure, -BsmtFinType1, -BsmtFinType2, -FireplaceQu, -GarageType, -GarageFinish, -GarageQual, -GarageCond, -PoolQC, -Fence, -MiscFeature)
#
nums <- select_if(maind, is.numeric)
nonNums <- maind %>% select_if(negate(is.numeric))
toDrop <- c("PoolQC")
nonNums[ , !(names(nonNums) %in% toDrop)]
NA2mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
nums[] <- lapply(nums, NA2mean)
# fixed<-merge(nonNums,nums, by="Id",all =TRUE)
# charr <- housePriceData %>% select_if(Negate(is.integer))
fixed <- cbind(nums, nonNums)
# noUse <- na.replace(noUse, 0)
#First remove the ID column from the data frame because we dont want to consider it in the correlation
nums <- nums[ , !names(nums) %in% c("Id")]
#this line finds the correlation betwen all values and the sales price
correlations <- cor(nums$SalePrice, nums[,1:36])
#this section sorts the highest correlation values and prints them
sortedCorrs <- order(abs(correlations))
sortedCorrs
topCorrs <- correlations[,c(7 , 6, 23, 19, 13, 12, 27, 26, 16,  4)]
topCorrs
# CatFeatures <- train[, CatFeaturesList]
for(i in names(nonNums)){
aovResult <- aov(formula = maind$SalePrice ~ nonNums[[i]], data = train)
summary(aovResult)[[1]][["Pr(>F)"]][[1]]
}
View(aovResult)
# CatFeatures <- train[, CatFeaturesList]
for(i in names(nonNums)){
aovResult <- aov(formula = maind$SalePrice ~ nonNums[[i]], data = train)
summary(aovResult)[[1]][["Pr(>F)"]][[1]]
}
sum_test = unlist(summary(aovResult))
names(sum_test)
# CatFeatures <- train[, CatFeaturesList]
for(i in names(nonNums)){
aovResult <- aov(formula = maind$SalePrice ~ nonNums[[i]], data = train)
summary(aovResult)[[1]][["Pr(>F)"]][[1]]
sum_test = unlist(summary(aovResult))
names(sum_test)
}
sum_test = unlist(summary(aovResult))
names(sum_test)
knitr::opts_chunk$set(echo = TRUE)
library(GGally)
library(tidyr)
library(Hmisc)
library(dplyr)
# install.packages("tidyverse")
library(tidyverse)
# install.packages("imputeTS")
library(zoo)
# install.packages("data.table")
# install.packages("mltools")
library(data.table)
library(mltools)
library(imputeTS)
maind = read.csv("housePriceData.csv")
maind
smp_size <- floor(0.80 * nrow(maind))
set.seed(123)
train_ind <- sample(seq_len(nrow(maind)), size = smp_size)
train <- maind[train_ind, ]
test <- maind[-train_ind, ]
# train
# test
# usedNA <- maind %>% select(BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType2, FireplaceQu, GarageType, GarageFinish, GarageQual, GarageCond, PoolQC, Fence, MiscFeature)
#
# noUse <- maind %>% select(-BsmtQual, -BsmtCond, -BsmtExposure, -BsmtFinType1, -BsmtFinType2, -FireplaceQu, -GarageType, -GarageFinish, -GarageQual, -GarageCond, -PoolQC, -Fence, -MiscFeature)
#
nums <- select_if(maind, is.numeric)
nonNums <- maind %>% select_if(negate(is.numeric))
toDrop <- c("PoolQC")
nonNums[ , !(names(nonNums) %in% toDrop)]
NA2mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
nums[] <- lapply(nums, NA2mean)
# fixed<-merge(nonNums,nums, by="Id",all =TRUE)
# charr <- housePriceData %>% select_if(Negate(is.integer))
fixed <- cbind(nums, nonNums)
# noUse <- na.replace(noUse, 0)
#First remove the ID column from the data frame because we dont want to consider it in the correlation
nums <- nums[ , !names(nums) %in% c("Id")]
#this line finds the correlation betwen all values and the sales price
correlations <- cor(nums$SalePrice, nums[,1:36])
#this section sorts the highest correlation values and prints them
sortedCorrs <- order(abs(correlations))
sortedCorrs
topCorrs <- correlations[,c(7 , 6, 23, 19, 13, 12, 27, 26, 16,  4)]
topCorrs
# CatFeatures <- train[, CatFeaturesList]
for(i in names(nonNums)){
aovResult <- aov(formula = maind$SalePrice ~ nonNums[[i]], data = train)
summary(aovResult)[[1]][["Pr(>F)"]][[1]]
sum_test = unlist(summary(aovResult))
names(sum_test)
}
sum_test = unlist(summary(aovResult))
names(sum_test)
knitr::opts_chunk$set(echo = TRUE)
library(GGally)
library(tidyr)
library(Hmisc)
library(dplyr)
# install.packages("tidyverse")
library(tidyverse)
# install.packages("imputeTS")
library(zoo)
# install.packages("data.table")
# install.packages("mltools")
library(data.table)
library(mltools)
library(imputeTS)
maind = read.csv("housePriceData.csv")
maind
smp_size <- floor(0.80 * nrow(maind))
set.seed(123)
train_ind <- sample(seq_len(nrow(maind)), size = smp_size)
train <- maind[train_ind, ]
test <- maind[-train_ind, ]
# train
# test
# usedNA <- maind %>% select(BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType2, FireplaceQu, GarageType, GarageFinish, GarageQual, GarageCond, PoolQC, Fence, MiscFeature)
#
# noUse <- maind %>% select(-BsmtQual, -BsmtCond, -BsmtExposure, -BsmtFinType1, -BsmtFinType2, -FireplaceQu, -GarageType, -GarageFinish, -GarageQual, -GarageCond, -PoolQC, -Fence, -MiscFeature)
#
nums <- select_if(maind, is.numeric)
nonNums <- maind %>% select_if(negate(is.numeric))
toDrop <- c("PoolQC")
nonNums[ , !(names(nonNums) %in% toDrop)]
NA2mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
nums[] <- lapply(nums, NA2mean)
# fixed<-merge(nonNums,nums, by="Id",all =TRUE)
# charr <- housePriceData %>% select_if(Negate(is.integer))
fixed <- cbind(nums, nonNums)
# noUse <- na.replace(noUse, 0)
#First remove the ID column from the data frame because we dont want to consider it in the correlation
nums <- nums[ , !names(nums) %in% c("Id")]
#this line finds the correlation betwen all values and the sales price
correlations <- cor(nums$SalePrice, nums[,1:36])
#this section sorts the highest correlation values and prints them
sortedCorrs <- order(abs(correlations))
sortedCorrs
topCorrs <- correlations[,c(7 , 6, 23, 19, 13, 12, 27, 26, 16,  4)]
topCorrs
# CatFeatures <- train[, CatFeaturesList]
for(i in names(nonNums)){
aovResult <- aov(formula = maind$SalePrice ~ nonNums[[i]], data = train)
summary(aovResult)
# sum_test = unlist(summary(aovResult))
# names(sum_test)
}
View(aovResult)
# CatFeatures <- train[, CatFeaturesList]
nonAndSale <- cbind(nums$SalePrice, nonNumsEncode)
# CatFeatures <- train[, CatFeaturesList]
nonAndSale <- cbind(nums$SalePrice, nonNums)
colnames(nonAndSale)[1] <- "SalePrice"
for(i in names(nonNums)){
if(i == "SalePrice") next
aovResult <- aov(formula = nonAndSale$SalePrice ~ nonAndSale[[i]], data = nonAndSale)
summary(aovResult)
# sum_test = unlist(summary(aovResult))
# names(sum_test)
}
View(nonNums)
# CatFeatures <- train[, CatFeaturesList]
nonAndSale <- cbind(nums$SalePrice, nonNums)
colnames(nonAndSale)[1] <- "SalePrice"
for(i in names(nonNums)){
if(i == "SalePrice") next
aovResult <- aov(formula = nonAndSale$SalePrice ~ nonAndSale[[i]], data = nonAndSale)
summary(aovResult)[[1]][["Pr(>F)"]][[1]
# sum_test = unlist(summary(aovResult))
# names(sum_test)
}
# CatFeatures <- train[, CatFeaturesList]
nonAndSale <- cbind(nums$SalePrice, nonNums)
colnames(nonAndSale)[1] <- "SalePrice"
for(i in names(nonNums)){
# if(i == "SalePrice") next
aovResult <- aov(formula = nonAndSale$SalePrice ~ nonAndSale[[i]], data = nonAndSale)
summary(aovResult)[[1]][["Pr(>F)"]][[1]
# sum_test = unlist(summary(aovResult))
# names(sum_test)
}
# CatFeatures <- train[, CatFeaturesList]
nonAndSale <- cbind(nums$SalePrice, nonNums)
colnames(nonAndSale)[1] <- "SalePrice"
for(i in names(nonNums)){
# if(i == "SalePrice") next
aovResult <- aov(formula = nonAndSale$SalePrice ~ nonAndSale[[i]], data = nonAndSale)
summary(aovResult)[[1]][["Pr(>F)"]][[1]]
# sum_test = unlist(summary(aovResult))
# names(sum_test)
}
View(nonAndSale)
View(correlations)
View(aovResult)
knitr::opts_chunk$set(echo = TRUE)
library(GGally)
library(tidyr)
library(Hmisc)
library(dplyr)
# install.packages("tidyverse")
library(tidyverse)
# install.packages("imputeTS")
library(zoo)
# install.packages("data.table")
# install.packages("mltools")
library(data.table)
library(mltools)
library(imputeTS)
maind = read.csv("housePriceData.csv")
maind
smp_size <- floor(0.80 * nrow(maind))
set.seed(123)
train_ind <- sample(seq_len(nrow(maind)), size = smp_size)
train <- maind[train_ind, ]
test <- maind[-train_ind, ]
# train
# test
# usedNA <- maind %>% select(BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType2, FireplaceQu, GarageType, GarageFinish, GarageQual, GarageCond, PoolQC, Fence, MiscFeature)
#
# noUse <- maind %>% select(-BsmtQual, -BsmtCond, -BsmtExposure, -BsmtFinType1, -BsmtFinType2, -FireplaceQu, -GarageType, -GarageFinish, -GarageQual, -GarageCond, -PoolQC, -Fence, -MiscFeature)
#
nums <- select_if(maind, is.numeric)
nonNums <- maind %>% select_if(negate(is.numeric))
toDrop <- c("PoolQC")
nonNums[ , !(names(nonNums) %in% toDrop)]
NA2mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
nums[] <- lapply(nums, NA2mean)
# fixed<-merge(nonNums,nums, by="Id",all =TRUE)
# charr <- housePriceData %>% select_if(Negate(is.integer))
fixed <- cbind(nums, nonNums)
# noUse <- na.replace(noUse, 0)
#First remove the ID column from the data frame because we dont want to consider it in the correlation
nums <- nums[ , !names(nums) %in% c("Id")]
#this line finds the correlation betwen all values and the sales price
correlations <- cor(nums$SalePrice, nums[,1:36])
#this section sorts the highest correlation values and prints them
sortedCorrs <- order(abs(correlations))
sortedCorrs
topCorrs <- correlations[,c(7 , 6, 23, 19, 13, 12, 27, 26, 16,  4)]
topCorrs
# CatFeatures <- train[, CatFeaturesList]
nonAndSale <- cbind(nums$SalePrice, nonNums)
colnames(nonAndSale)[1] <- "SalePrice"
for(i in names(nonNums)){
# if(i == "SalePrice") next
aovResult <- aov(formula = nonAndSale$SalePrice ~ nonAndSale[[i]], data = nonAndSale)
summary(aovResult)[[1]][["Pr(>F)"]][[1]]
# sum_test = unlist(summary(aovResult))
# names(sum_test)
}
